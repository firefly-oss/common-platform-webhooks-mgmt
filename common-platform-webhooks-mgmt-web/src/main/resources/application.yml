spring:
  application:
    name: common-platform-webhooks-mgmt

  # Allow bean definition overriding for lib-common-cache Redis configuration
  main:
    allow-bean-definition-overriding: true

  # WebFlux Configuration
  webflux:
    base-path: /

  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

  # Redis Configuration (for Spring Boot's health check and auto-configuration)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      password: ${REDIS_PASSWORD:}
      username: ${REDIS_USERNAME:}
      ssl:
        enabled: ${REDIS_SSL:false}
      timeout: 10s

  # RabbitMQ Configuration (disable auto-configuration if not used)
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

# Server Configuration
server:
  port: 8080
  http2:
    enabled: true

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  health:
    # Disable RabbitMQ health check if RabbitMQ is not running
    rabbit:
      enabled: ${RABBITMQ_HEALTH_ENABLED:false}
    # Redis health check will use spring.data.redis configuration
    redis:
      enabled: ${REDIS_HEALTH_ENABLED:true}

# Firefly Webhook Configuration
firefly:
  webhooks:
    # Destination Configuration for Message Queue Topics/Queues
    # The destination is built using: {prefix}{provider-name}{suffix}
    destination:
      # Prefix to add before the provider name (optional)
      # Example: "webhooks." results in "webhooks.stripe"
      prefix: ""
      
      # Suffix to add after the provider name (optional)
      # Example: ".received" results in "stripe.received"
      suffix: ""
      
      # Whether to use provider name as the topic/queue name (default: true)
      # When true: topic = {prefix}{provider-name}{suffix}
      # When false: topic = {prefix}{suffix}
      # Examples:
      #   - Default (provider name only): "stripe", "paypal", "twilio"
      #   - With prefix "webhooks.": "webhooks.stripe", "webhooks.paypal"
      #   - With prefix and suffix "webhooks." + ".received": "webhooks.stripe.received"
      use-provider-as-topic: true
      
      # Custom destination (overrides all other settings)
      # If set, all webhooks go to this single destination regardless of provider
      # Example: "webhooks.all" - all providers publish to the same topic
      custom: ""
    


  # Cache Configuration (for webhook idempotency in workers)
  cache:
    enabled: ${FIREFLY_CACHE_ENABLED:true}
    default-cache-type: ${FIREFLY_CACHE_TYPE:REDIS}  # REDIS for distributed workers, CAFFEINE for single instance
    metrics-enabled: true
    health-enabled: true
    stats-enabled: true

    # Caffeine (in-memory) cache configuration
    caffeine:
      enabled: true
      cache-name: "webhook-idempotency"
      key-prefix: "firefly:webhooks"
      maximum-size: 10000
      expire-after-write: 1h
      record-stats: true

    # Redis (distributed) cache configuration
    redis:
      enabled: ${FIREFLY_REDIS_ENABLED:true}
      cache-name: "webhook-idempotency"
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      password: ${REDIS_PASSWORD:}
      username: ${REDIS_USERNAME:}
      connection-timeout: 10s
      command-timeout: 5s
      key-prefix: "firefly:webhooks"
      default-ttl: 7d  # Keep processed event markers for 7 days
      max-pool-size: 8
      min-pool-size: 2
      ssl: ${REDIS_SSL:false}

  # EDA Configuration
  eda:
    enabled: true
    default-publisher-type: ${FIREFLY_EDA_PUBLISHER_TYPE:KAFKA}
    default-consumer-type: ${FIREFLY_EDA_CONSUMER_TYPE:KAFKA}
    default-serialization-format: ${FIREFLY_EDA_SERIALIZATION_FORMAT:json}
    metrics-enabled: ${FIREFLY_EDA_METRICS_ENABLED:true} # Enabled for tests
    health-enabled: ${FIREFLY_EDA_HEALTH_ENABLED:true}

    # Publishers Configuration
    publishers:
      # Kafka Publisher (Primary)
      kafka:
        default:
          enabled: true
          bootstrap-servers: ${FIREFLY_KAFKA_BOOTSTRAP_SERVERS}
          properties:
            acks: all
            retries: 3
            compression.type: snappy
            max.in.flight.requests.per.connection: 5
            enable.idempotence: true
            linger.ms: 10
            batch.size: 16384
            buffer.memory: 33554432

    # Consumer Configuration
    consumer:
      enabled: true
      group-id: ${FIREFLY_CONSUMER_GROUP_ID:webhook-worker-test}
      kafka:
        default:
          enabled: true
          bootstrap-servers: ${FIREFLY_KAFKA_BOOTSTRAP_SERVERS}
          auto-offset-reset: earliest
          properties:
            enable.auto.commit: true
            auto.commit.interval.ms: 1000
            metadata.max.age.ms: 1000

# OpenAPI / Swagger Configuration
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  show-actuator: true
  packages-to-scan: com.firefly.common.webhooks.web.controllers
  paths-to-match: /api/**

# Logging Configuration
logging:
  level:
    root: INFO
    com.firefly.common.webhooks: DEBUG
    com.firefly.common.eda: DEBUG
    com.firefly.common.eventsourcing: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
